
altimeter_measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e28  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000fc0  08000fc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fec  08000fec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000fec  08000fec  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fec  08000fec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fec  08000fec  00010fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001050  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001050  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011bf  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000059d  00000000  00000000  0002128e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  00021830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011c  00000000  00000000  000219d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fdd4  00000000  00000000  00021af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002646  00000000  00000000  000318c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005527e  00000000  00000000  00033f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b34  00000000  00000000  0008918c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00089cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000fa8 	.word	0x08000fa8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08000fa8 	.word	0x08000fa8

080001d8 <alt_component_init>:
#define T_LSB								0x05

#define DATA_CHECK							0X08


void alt_component_init(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	I2C1_write_reg(SLAVE_ADDRESS_WRITE, SLAVE_CR1, 0XB8);
 80001dc:	22b8      	movs	r2, #184	; 0xb8
 80001de:	2126      	movs	r1, #38	; 0x26
 80001e0:	20c0      	movs	r0, #192	; 0xc0
 80001e2:	f000 f8b9 	bl	8000358 <I2C1_write_reg>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
	...

080001ec <i2c1_init>:

void I2C1_generate_start(void);
void I2C1_write(uint8_t data);
void I2C1_send_adr(uint8_t adr);

void i2c1_init(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0

	/*Config IO port to I2C*/
	RCC->AHB1ENR |= GPIOBEN;
 80001f0:	4b24      	ldr	r3, [pc, #144]	; (8000284 <i2c1_init+0x98>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f4:	4a23      	ldr	r2, [pc, #140]	; (8000284 <i2c1_init+0x98>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER |= (1U<<15 | 1U<<13);
 80001fc:	4b22      	ldr	r3, [pc, #136]	; (8000288 <i2c1_init+0x9c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a21      	ldr	r2, [pc, #132]	; (8000288 <i2c1_init+0x9c>)
 8000202:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000206:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= (1U<<7 | 1U<<6);// SET OPEN DRAIN
 8000208:	4b1f      	ldr	r3, [pc, #124]	; (8000288 <i2c1_init+0x9c>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a1e      	ldr	r2, [pc, #120]	; (8000288 <i2c1_init+0x9c>)
 800020e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000212:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR |= (1U<<14 | 1U<<12);// ENABLE PULL UP
 8000214:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <i2c1_init+0x9c>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a1b      	ldr	r2, [pc, #108]	; (8000288 <i2c1_init+0x9c>)
 800021a:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 800021e:	60d3      	str	r3, [r2, #12]
	GPIOB->AFR[0] |= (1U<<30 | 1U<<26); //SET AF04
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <i2c1_init+0x9c>)
 8000222:	6a1b      	ldr	r3, [r3, #32]
 8000224:	4a18      	ldr	r2, [pc, #96]	; (8000288 <i2c1_init+0x9c>)
 8000226:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 800022a:	6213      	str	r3, [r2, #32]
    GPIOB->OSPEEDR |= (3U << 14 | 3U << 12);
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <i2c1_init+0x9c>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a15      	ldr	r2, [pc, #84]	; (8000288 <i2c1_init+0x9c>)
 8000232:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000236:	6093      	str	r3, [r2, #8]

	/*Config I2C*/
	RCC->APB1ENR |= I2C1EN;
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <i2c1_init+0x98>)
 800023a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <i2c1_init+0x98>)
 800023e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000242:	6413      	str	r3, [r2, #64]	; 0x40

	I2C1->CR1 |= CR1_SWRST; // reset I2C1
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <i2c1_init+0xa0>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a10      	ldr	r2, [pc, #64]	; (800028c <i2c1_init+0xa0>)
 800024a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800024e:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~CR1_SWRST;
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <i2c1_init+0xa0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a0d      	ldr	r2, [pc, #52]	; (800028c <i2c1_init+0xa0>)
 8000256:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800025a:	6013      	str	r3, [r2, #0]

	I2C1->CR2 = (1U<<4); // SET 16MHz
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <i2c1_init+0xa0>)
 800025e:	2210      	movs	r2, #16
 8000260:	605a      	str	r2, [r3, #4]

	I2C1->CCR = (SYSFREQ / (2 * I2C_BUS_SPEED)); // config ccr to 100kHz
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <i2c1_init+0xa0>)
 8000264:	2250      	movs	r2, #80	; 0x50
 8000266:	61da      	str	r2, [r3, #28]

	I2C1->TRISE = MAX_RISE_TIME;
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <i2c1_init+0xa0>)
 800026a:	2211      	movs	r2, #17
 800026c:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= CR1_PE; //periph enable
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <i2c1_init+0xa0>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a06      	ldr	r2, [pc, #24]	; (800028c <i2c1_init+0xa0>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6013      	str	r3, [r2, #0]
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40023800 	.word	0x40023800
 8000288:	40020400 	.word	0x40020400
 800028c:	40005400 	.word	0x40005400

08000290 <I2C1_generate_start>:

void I2C1_generate_start(void){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	// Enable ACK
	I2C1->CR1 |= CR1_ACK;
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <I2C1_generate_start+0x38>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <I2C1_generate_start+0x38>)
 800029a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029e:	6013      	str	r3, [r2, #0]

	// send start condition
	I2C1->CR1 |= CR1_START;
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <I2C1_generate_start+0x38>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <I2C1_generate_start+0x38>)
 80002a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002aa:	6013      	str	r3, [r2, #0]

	// wait for start to send
	while(!(I2C1->SR1 & SR1_SB));
 80002ac:	bf00      	nop
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <I2C1_generate_start+0x38>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f9      	beq.n	80002ae <I2C1_generate_start+0x1e>

}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40005400 	.word	0x40005400

080002cc <I2C1_write>:

void I2C1_write(uint8_t data){
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	// wait for data reg empty
	while(!(I2C1->SR1 & SR1_TxE));
 80002d6:	bf00      	nop
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <I2C1_write+0x3c>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f9      	beq.n	80002d8 <I2C1_write+0xc>

	// load data into register
	I2C1->DR = data;
 80002e4:	4a08      	ldr	r2, [pc, #32]	; (8000308 <I2C1_write+0x3c>)
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	6113      	str	r3, [r2, #16]

	// wait for BTF
	while(!(I2C1->SR1 & SR1_BTF));
 80002ea:	bf00      	nop
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <I2C1_write+0x3c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f9      	beq.n	80002ec <I2C1_write+0x20>
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40005400 	.word	0x40005400

0800030c <I2C1_send_adr>:

void I2C1_send_adr(uint8_t adr){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]

	(void)I2C1->SR1;
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <I2C1_send_adr+0x40>)
 8000318:	695b      	ldr	r3, [r3, #20]

	// send address
	I2C1->DR = adr;
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <I2C1_send_adr+0x40>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	6113      	str	r3, [r2, #16]

	printf("address sent\n");
 8000320:	480b      	ldr	r0, [pc, #44]	; (8000350 <I2C1_send_adr+0x44>)
 8000322:	f000 faab 	bl	800087c <puts>
	// wait for acknowledge of address
	while(!(I2C1->SR1 & SR1_ADDR));
 8000326:	bf00      	nop
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <I2C1_send_adr+0x40>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	f003 0302 	and.w	r3, r3, #2
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f9      	beq.n	8000328 <I2C1_send_adr+0x1c>
	printf("address received\n");
 8000334:	4807      	ldr	r0, [pc, #28]	; (8000354 <I2C1_send_adr+0x48>)
 8000336:	f000 faa1 	bl	800087c <puts>

	// clear addr (read to clear)
	(void)I2C1->SR1;
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <I2C1_send_adr+0x40>)
 800033c:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 800033e:	4b03      	ldr	r3, [pc, #12]	; (800034c <I2C1_send_adr+0x40>)
 8000340:	699b      	ldr	r3, [r3, #24]
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40005400 	.word	0x40005400
 8000350:	08000fc0 	.word	0x08000fc0
 8000354:	08000fd0 	.word	0x08000fd0

08000358 <I2C1_write_reg>:

void I2C1_write_reg(uint8_t sl_adr, uint8_t reg_adr, uint8_t data){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
 8000362:	460b      	mov	r3, r1
 8000364:	71bb      	strb	r3, [r7, #6]
 8000366:	4613      	mov	r3, r2
 8000368:	717b      	strb	r3, [r7, #5]
	// generate start
	I2C1_generate_start();
 800036a:	f7ff ff91 	bl	8000290 <I2C1_generate_start>

	// send address
	I2C1_send_adr(sl_adr);
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ffcb 	bl	800030c <I2C1_send_adr>
	I2C1_send_adr(reg_adr);
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ffc7 	bl	800030c <I2C1_send_adr>

	// write data
	I2C1_write(data);
 800037e:	797b      	ldrb	r3, [r7, #5]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ffa3 	bl	80002cc <I2C1_write>

	// generate stop
	I2C1->CR1 |= CR1_STOP;
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <I2C1_write_reg+0x44>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <I2C1_write_reg+0x44>)
 800038c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000390:	6013      	str	r3, [r2, #0]
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40005400 	.word	0x40005400

080003a0 <main>:
#include "stm32f411xe.h"
#include "i2c_handler.h"
#include "MPL3115A2_handler.h"
#include "uart_driver.h"

int main(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	uart1_tx_init();
 80003a4:	f000 f8ae 	bl	8000504 <uart1_tx_init>
	i2c1_init();
 80003a8:	f7ff ff20 	bl	80001ec <i2c1_init>
	alt_component_init();
 80003ac:	f7ff ff14 	bl	80001d8 <alt_component_init>
	while(1){printf("Made it\n");}
 80003b0:	4801      	ldr	r0, [pc, #4]	; (80003b8 <main+0x18>)
 80003b2:	f000 fa63 	bl	800087c <puts>
 80003b6:	e7fb      	b.n	80003b0 <main+0x10>
 80003b8:	08000fe4 	.word	0x08000fe4

080003bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	e00a      	b.n	80003e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003ce:	f3af 8000 	nop.w
 80003d2:	4601      	mov	r1, r0
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	60ba      	str	r2, [r7, #8]
 80003da:	b2ca      	uxtb	r2, r1
 80003dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3301      	adds	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	dbf0      	blt.n	80003ce <_read+0x12>
  }

  return len;
 80003ec:	687b      	ldr	r3, [r7, #4]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b086      	sub	sp, #24
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	60f8      	str	r0, [r7, #12]
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e009      	b.n	800041c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	60ba      	str	r2, [r7, #8]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f8b3 	bl	800057c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	3301      	adds	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	429a      	cmp	r2, r3
 8000422:	dbf1      	blt.n	8000408 <_write+0x12>
  }
  return len;
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <_close>:

int _close(int file)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000456:	605a      	str	r2, [r3, #4]
  return 0;
 8000458:	2300      	movs	r3, #0
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <_isatty>:

int _isatty(int file)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a0:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <_sbrk+0x5c>)
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <_sbrk+0x60>)
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <_sbrk+0x64>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <_sbrk+0x68>)
 80004b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d207      	bcs.n	80004d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c8:	f000 f9e8 	bl	800089c <__errno>
 80004cc:	4603      	mov	r3, r0
 80004ce:	220c      	movs	r2, #12
 80004d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004d6:	e009      	b.n	80004ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <_sbrk+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20020000 	.word	0x20020000
 80004f8:	00000400 	.word	0x00000400
 80004fc:	20000078 	.word	0x20000078
 8000500:	200001c8 	.word	0x200001c8

08000504 <uart1_tx_init>:
/* Function Declerations */
void uart1_set_brr(uint32_t periphClk, uint32_t baud);
void uart1_write(int ch);

void uart1_tx_init()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
    /***** Configure GPIOA PIN9 *****/
    RCC->AHB1ENR |= GPIOAEN;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <uart1_tx_init+0x68>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a17      	ldr	r2, [pc, #92]	; (800056c <uart1_tx_init+0x68>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= PIN9_MODE;
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <uart1_tx_init+0x6c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a15      	ldr	r2, [pc, #84]	; (8000570 <uart1_tx_init+0x6c>)
 800051a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800051e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] |= UART_AF;
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <uart1_tx_init+0x6c>)
 8000522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <uart1_tx_init+0x6c>)
 8000526:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800052a:	6253      	str	r3, [r2, #36]	; 0x24

    /***** Configure USART1 *****/
    RCC->APB2ENR |= USART1EN;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <uart1_tx_init+0x68>)
 800052e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000530:	4a0e      	ldr	r2, [pc, #56]	; (800056c <uart1_tx_init+0x68>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6453      	str	r3, [r2, #68]	; 0x44
    USART1->CR1 &= ~CR1_UE; // disable usart 
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <uart1_tx_init+0x70>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <uart1_tx_init+0x70>)
 800053e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000542:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= CR1_TE; // enable TX
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <uart1_tx_init+0x70>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <uart1_tx_init+0x70>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	60d3      	str	r3, [r2, #12]
    uart1_set_brr(APB2CLK, BAUDRATE);
 8000550:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000554:	4808      	ldr	r0, [pc, #32]	; (8000578 <uart1_tx_init+0x74>)
 8000556:	f000 f81d 	bl	8000594 <uart1_set_brr>
    USART1->CR1 |= CR1_UE;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <uart1_tx_init+0x70>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	4a05      	ldr	r2, [pc, #20]	; (8000574 <uart1_tx_init+0x70>)
 8000560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000564:	60d3      	str	r3, [r2, #12]
    
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	40020000 	.word	0x40020000
 8000574:	40011000 	.word	0x40011000
 8000578:	00f42400 	.word	0x00f42400

0800057c <__io_putchar>:

int __io_putchar(int ch)
{ 
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    /*Overwrite printf*/
    uart1_write(ch);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f821 	bl	80005cc <uart1_write>
    return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <uart1_set_brr>:

void uart1_set_brr(uint32_t periphClk, uint32_t baud)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
    uint16_t uartdiv = periphClk / baud;
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a6:	81fb      	strh	r3, [r7, #14]
    USART1->BRR = (((uartdiv / 16) << 4) | (uartdiv % 16));
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	091b      	lsrs	r3, r3, #4
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	011a      	lsls	r2, r3, #4
 80005b0:	89fb      	ldrh	r3, [r7, #14]
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <uart1_set_brr+0x34>)
 80005ba:	609a      	str	r2, [r3, #8]
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	40011000 	.word	0x40011000

080005cc <uart1_write>:

void uart1_write(int ch)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    while(!(USART1->SR & SR_TXE)){}
 80005d4:	bf00      	nop
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <uart1_write+0x2c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <uart1_write+0xa>
    USART1->DR = (ch & 0xFF);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <uart1_write+0x2c>)
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	6053      	str	r3, [r2, #4]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40011000 	.word	0x40011000

080005fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000600:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <LoopForever+0x6>)
  ldr r1, =_edata
 8000606:	490d      	ldr	r1, [pc, #52]	; (800063c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <LoopForever+0xe>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800061c:	4c0a      	ldr	r4, [pc, #40]	; (8000648 <LoopForever+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062a:	f000 f93d 	bl	80008a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062e:	f7ff feb7 	bl	80003a0 <main>

08000632 <LoopForever>:

LoopForever:
  b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   r0, =_estack
 8000634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000640:	08000ff4 	.word	0x08000ff4
  ldr r2, =_sbss
 8000644:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000648:	200001c8 	.word	0x200001c8

0800064c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC_IRQHandler>
	...

08000650 <std>:
 8000650:	2300      	movs	r3, #0
 8000652:	b510      	push	{r4, lr}
 8000654:	4604      	mov	r4, r0
 8000656:	e9c0 3300 	strd	r3, r3, [r0]
 800065a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800065e:	6083      	str	r3, [r0, #8]
 8000660:	8181      	strh	r1, [r0, #12]
 8000662:	6643      	str	r3, [r0, #100]	; 0x64
 8000664:	81c2      	strh	r2, [r0, #14]
 8000666:	6183      	str	r3, [r0, #24]
 8000668:	4619      	mov	r1, r3
 800066a:	2208      	movs	r2, #8
 800066c:	305c      	adds	r0, #92	; 0x5c
 800066e:	f000 f90d 	bl	800088c <memset>
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <std+0x58>)
 8000674:	6263      	str	r3, [r4, #36]	; 0x24
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <std+0x5c>)
 8000678:	62a3      	str	r3, [r4, #40]	; 0x28
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <std+0x60>)
 800067c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <std+0x64>)
 8000680:	6323      	str	r3, [r4, #48]	; 0x30
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <std+0x68>)
 8000684:	6224      	str	r4, [r4, #32]
 8000686:	429c      	cmp	r4, r3
 8000688:	d006      	beq.n	8000698 <std+0x48>
 800068a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800068e:	4294      	cmp	r4, r2
 8000690:	d002      	beq.n	8000698 <std+0x48>
 8000692:	33d0      	adds	r3, #208	; 0xd0
 8000694:	429c      	cmp	r4, r3
 8000696:	d105      	bne.n	80006a4 <std+0x54>
 8000698:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a0:	f000 b926 	b.w	80008f0 <__retarget_lock_init_recursive>
 80006a4:	bd10      	pop	{r4, pc}
 80006a6:	bf00      	nop
 80006a8:	08000bad 	.word	0x08000bad
 80006ac:	08000bcf 	.word	0x08000bcf
 80006b0:	08000c07 	.word	0x08000c07
 80006b4:	08000c2b 	.word	0x08000c2b
 80006b8:	2000007c 	.word	0x2000007c

080006bc <stdio_exit_handler>:
 80006bc:	4a02      	ldr	r2, [pc, #8]	; (80006c8 <stdio_exit_handler+0xc>)
 80006be:	4903      	ldr	r1, [pc, #12]	; (80006cc <stdio_exit_handler+0x10>)
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <stdio_exit_handler+0x14>)
 80006c2:	f000 b869 	b.w	8000798 <_fwalk_sglue>
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	08000b45 	.word	0x08000b45
 80006d0:	2000000c 	.word	0x2000000c

080006d4 <cleanup_stdio>:
 80006d4:	6841      	ldr	r1, [r0, #4]
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <cleanup_stdio+0x34>)
 80006d8:	4299      	cmp	r1, r3
 80006da:	b510      	push	{r4, lr}
 80006dc:	4604      	mov	r4, r0
 80006de:	d001      	beq.n	80006e4 <cleanup_stdio+0x10>
 80006e0:	f000 fa30 	bl	8000b44 <_fflush_r>
 80006e4:	68a1      	ldr	r1, [r4, #8]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <cleanup_stdio+0x38>)
 80006e8:	4299      	cmp	r1, r3
 80006ea:	d002      	beq.n	80006f2 <cleanup_stdio+0x1e>
 80006ec:	4620      	mov	r0, r4
 80006ee:	f000 fa29 	bl	8000b44 <_fflush_r>
 80006f2:	68e1      	ldr	r1, [r4, #12]
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <cleanup_stdio+0x3c>)
 80006f6:	4299      	cmp	r1, r3
 80006f8:	d004      	beq.n	8000704 <cleanup_stdio+0x30>
 80006fa:	4620      	mov	r0, r4
 80006fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000700:	f000 ba20 	b.w	8000b44 <_fflush_r>
 8000704:	bd10      	pop	{r4, pc}
 8000706:	bf00      	nop
 8000708:	2000007c 	.word	0x2000007c
 800070c:	200000e4 	.word	0x200000e4
 8000710:	2000014c 	.word	0x2000014c

08000714 <global_stdio_init.part.0>:
 8000714:	b510      	push	{r4, lr}
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <global_stdio_init.part.0+0x30>)
 8000718:	4c0b      	ldr	r4, [pc, #44]	; (8000748 <global_stdio_init.part.0+0x34>)
 800071a:	4a0c      	ldr	r2, [pc, #48]	; (800074c <global_stdio_init.part.0+0x38>)
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	4620      	mov	r0, r4
 8000720:	2200      	movs	r2, #0
 8000722:	2104      	movs	r1, #4
 8000724:	f7ff ff94 	bl	8000650 <std>
 8000728:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800072c:	2201      	movs	r2, #1
 800072e:	2109      	movs	r1, #9
 8000730:	f7ff ff8e 	bl	8000650 <std>
 8000734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000738:	2202      	movs	r2, #2
 800073a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800073e:	2112      	movs	r1, #18
 8000740:	f7ff bf86 	b.w	8000650 <std>
 8000744:	200001b4 	.word	0x200001b4
 8000748:	2000007c 	.word	0x2000007c
 800074c:	080006bd 	.word	0x080006bd

08000750 <__sfp_lock_acquire>:
 8000750:	4801      	ldr	r0, [pc, #4]	; (8000758 <__sfp_lock_acquire+0x8>)
 8000752:	f000 b8ce 	b.w	80008f2 <__retarget_lock_acquire_recursive>
 8000756:	bf00      	nop
 8000758:	200001b9 	.word	0x200001b9

0800075c <__sfp_lock_release>:
 800075c:	4801      	ldr	r0, [pc, #4]	; (8000764 <__sfp_lock_release+0x8>)
 800075e:	f000 b8c9 	b.w	80008f4 <__retarget_lock_release_recursive>
 8000762:	bf00      	nop
 8000764:	200001b9 	.word	0x200001b9

08000768 <__sinit>:
 8000768:	b510      	push	{r4, lr}
 800076a:	4604      	mov	r4, r0
 800076c:	f7ff fff0 	bl	8000750 <__sfp_lock_acquire>
 8000770:	6a23      	ldr	r3, [r4, #32]
 8000772:	b11b      	cbz	r3, 800077c <__sinit+0x14>
 8000774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000778:	f7ff bff0 	b.w	800075c <__sfp_lock_release>
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <__sinit+0x28>)
 800077e:	6223      	str	r3, [r4, #32]
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__sinit+0x2c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f5      	bne.n	8000774 <__sinit+0xc>
 8000788:	f7ff ffc4 	bl	8000714 <global_stdio_init.part.0>
 800078c:	e7f2      	b.n	8000774 <__sinit+0xc>
 800078e:	bf00      	nop
 8000790:	080006d5 	.word	0x080006d5
 8000794:	200001b4 	.word	0x200001b4

08000798 <_fwalk_sglue>:
 8000798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800079c:	4607      	mov	r7, r0
 800079e:	4688      	mov	r8, r1
 80007a0:	4614      	mov	r4, r2
 80007a2:	2600      	movs	r6, #0
 80007a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007a8:	f1b9 0901 	subs.w	r9, r9, #1
 80007ac:	d505      	bpl.n	80007ba <_fwalk_sglue+0x22>
 80007ae:	6824      	ldr	r4, [r4, #0]
 80007b0:	2c00      	cmp	r4, #0
 80007b2:	d1f7      	bne.n	80007a4 <_fwalk_sglue+0xc>
 80007b4:	4630      	mov	r0, r6
 80007b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007ba:	89ab      	ldrh	r3, [r5, #12]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d907      	bls.n	80007d0 <_fwalk_sglue+0x38>
 80007c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007c4:	3301      	adds	r3, #1
 80007c6:	d003      	beq.n	80007d0 <_fwalk_sglue+0x38>
 80007c8:	4629      	mov	r1, r5
 80007ca:	4638      	mov	r0, r7
 80007cc:	47c0      	blx	r8
 80007ce:	4306      	orrs	r6, r0
 80007d0:	3568      	adds	r5, #104	; 0x68
 80007d2:	e7e9      	b.n	80007a8 <_fwalk_sglue+0x10>

080007d4 <_puts_r>:
 80007d4:	6a03      	ldr	r3, [r0, #32]
 80007d6:	b570      	push	{r4, r5, r6, lr}
 80007d8:	6884      	ldr	r4, [r0, #8]
 80007da:	4605      	mov	r5, r0
 80007dc:	460e      	mov	r6, r1
 80007de:	b90b      	cbnz	r3, 80007e4 <_puts_r+0x10>
 80007e0:	f7ff ffc2 	bl	8000768 <__sinit>
 80007e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007e6:	07db      	lsls	r3, r3, #31
 80007e8:	d405      	bmi.n	80007f6 <_puts_r+0x22>
 80007ea:	89a3      	ldrh	r3, [r4, #12]
 80007ec:	0598      	lsls	r0, r3, #22
 80007ee:	d402      	bmi.n	80007f6 <_puts_r+0x22>
 80007f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007f2:	f000 f87e 	bl	80008f2 <__retarget_lock_acquire_recursive>
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	0719      	lsls	r1, r3, #28
 80007fa:	d513      	bpl.n	8000824 <_puts_r+0x50>
 80007fc:	6923      	ldr	r3, [r4, #16]
 80007fe:	b18b      	cbz	r3, 8000824 <_puts_r+0x50>
 8000800:	3e01      	subs	r6, #1
 8000802:	68a3      	ldr	r3, [r4, #8]
 8000804:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000808:	3b01      	subs	r3, #1
 800080a:	60a3      	str	r3, [r4, #8]
 800080c:	b9e9      	cbnz	r1, 800084a <_puts_r+0x76>
 800080e:	2b00      	cmp	r3, #0
 8000810:	da2e      	bge.n	8000870 <_puts_r+0x9c>
 8000812:	4622      	mov	r2, r4
 8000814:	210a      	movs	r1, #10
 8000816:	4628      	mov	r0, r5
 8000818:	f000 fa0b 	bl	8000c32 <__swbuf_r>
 800081c:	3001      	adds	r0, #1
 800081e:	d007      	beq.n	8000830 <_puts_r+0x5c>
 8000820:	250a      	movs	r5, #10
 8000822:	e007      	b.n	8000834 <_puts_r+0x60>
 8000824:	4621      	mov	r1, r4
 8000826:	4628      	mov	r0, r5
 8000828:	f000 fa40 	bl	8000cac <__swsetup_r>
 800082c:	2800      	cmp	r0, #0
 800082e:	d0e7      	beq.n	8000800 <_puts_r+0x2c>
 8000830:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000836:	07da      	lsls	r2, r3, #31
 8000838:	d405      	bmi.n	8000846 <_puts_r+0x72>
 800083a:	89a3      	ldrh	r3, [r4, #12]
 800083c:	059b      	lsls	r3, r3, #22
 800083e:	d402      	bmi.n	8000846 <_puts_r+0x72>
 8000840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000842:	f000 f857 	bl	80008f4 <__retarget_lock_release_recursive>
 8000846:	4628      	mov	r0, r5
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	2b00      	cmp	r3, #0
 800084c:	da04      	bge.n	8000858 <_puts_r+0x84>
 800084e:	69a2      	ldr	r2, [r4, #24]
 8000850:	429a      	cmp	r2, r3
 8000852:	dc06      	bgt.n	8000862 <_puts_r+0x8e>
 8000854:	290a      	cmp	r1, #10
 8000856:	d004      	beq.n	8000862 <_puts_r+0x8e>
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	6022      	str	r2, [r4, #0]
 800085e:	7019      	strb	r1, [r3, #0]
 8000860:	e7cf      	b.n	8000802 <_puts_r+0x2e>
 8000862:	4622      	mov	r2, r4
 8000864:	4628      	mov	r0, r5
 8000866:	f000 f9e4 	bl	8000c32 <__swbuf_r>
 800086a:	3001      	adds	r0, #1
 800086c:	d1c9      	bne.n	8000802 <_puts_r+0x2e>
 800086e:	e7df      	b.n	8000830 <_puts_r+0x5c>
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	250a      	movs	r5, #10
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	6022      	str	r2, [r4, #0]
 8000878:	701d      	strb	r5, [r3, #0]
 800087a:	e7db      	b.n	8000834 <_puts_r+0x60>

0800087c <puts>:
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <puts+0xc>)
 800087e:	4601      	mov	r1, r0
 8000880:	6818      	ldr	r0, [r3, #0]
 8000882:	f7ff bfa7 	b.w	80007d4 <_puts_r>
 8000886:	bf00      	nop
 8000888:	20000058 	.word	0x20000058

0800088c <memset>:
 800088c:	4402      	add	r2, r0
 800088e:	4603      	mov	r3, r0
 8000890:	4293      	cmp	r3, r2
 8000892:	d100      	bne.n	8000896 <memset+0xa>
 8000894:	4770      	bx	lr
 8000896:	f803 1b01 	strb.w	r1, [r3], #1
 800089a:	e7f9      	b.n	8000890 <memset+0x4>

0800089c <__errno>:
 800089c:	4b01      	ldr	r3, [pc, #4]	; (80008a4 <__errno+0x8>)
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000058 	.word	0x20000058

080008a8 <__libc_init_array>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	4d0d      	ldr	r5, [pc, #52]	; (80008e0 <__libc_init_array+0x38>)
 80008ac:	4c0d      	ldr	r4, [pc, #52]	; (80008e4 <__libc_init_array+0x3c>)
 80008ae:	1b64      	subs	r4, r4, r5
 80008b0:	10a4      	asrs	r4, r4, #2
 80008b2:	2600      	movs	r6, #0
 80008b4:	42a6      	cmp	r6, r4
 80008b6:	d109      	bne.n	80008cc <__libc_init_array+0x24>
 80008b8:	4d0b      	ldr	r5, [pc, #44]	; (80008e8 <__libc_init_array+0x40>)
 80008ba:	4c0c      	ldr	r4, [pc, #48]	; (80008ec <__libc_init_array+0x44>)
 80008bc:	f000 fb74 	bl	8000fa8 <_init>
 80008c0:	1b64      	subs	r4, r4, r5
 80008c2:	10a4      	asrs	r4, r4, #2
 80008c4:	2600      	movs	r6, #0
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d105      	bne.n	80008d6 <__libc_init_array+0x2e>
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d0:	4798      	blx	r3
 80008d2:	3601      	adds	r6, #1
 80008d4:	e7ee      	b.n	80008b4 <__libc_init_array+0xc>
 80008d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008da:	4798      	blx	r3
 80008dc:	3601      	adds	r6, #1
 80008de:	e7f2      	b.n	80008c6 <__libc_init_array+0x1e>
 80008e0:	08000fec 	.word	0x08000fec
 80008e4:	08000fec 	.word	0x08000fec
 80008e8:	08000fec 	.word	0x08000fec
 80008ec:	08000ff0 	.word	0x08000ff0

080008f0 <__retarget_lock_init_recursive>:
 80008f0:	4770      	bx	lr

080008f2 <__retarget_lock_acquire_recursive>:
 80008f2:	4770      	bx	lr

080008f4 <__retarget_lock_release_recursive>:
 80008f4:	4770      	bx	lr
	...

080008f8 <sbrk_aligned>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4e0e      	ldr	r6, [pc, #56]	; (8000934 <sbrk_aligned+0x3c>)
 80008fc:	460c      	mov	r4, r1
 80008fe:	6831      	ldr	r1, [r6, #0]
 8000900:	4605      	mov	r5, r0
 8000902:	b911      	cbnz	r1, 800090a <sbrk_aligned+0x12>
 8000904:	f000 fae2 	bl	8000ecc <_sbrk_r>
 8000908:	6030      	str	r0, [r6, #0]
 800090a:	4621      	mov	r1, r4
 800090c:	4628      	mov	r0, r5
 800090e:	f000 fadd 	bl	8000ecc <_sbrk_r>
 8000912:	1c43      	adds	r3, r0, #1
 8000914:	d00a      	beq.n	800092c <sbrk_aligned+0x34>
 8000916:	1cc4      	adds	r4, r0, #3
 8000918:	f024 0403 	bic.w	r4, r4, #3
 800091c:	42a0      	cmp	r0, r4
 800091e:	d007      	beq.n	8000930 <sbrk_aligned+0x38>
 8000920:	1a21      	subs	r1, r4, r0
 8000922:	4628      	mov	r0, r5
 8000924:	f000 fad2 	bl	8000ecc <_sbrk_r>
 8000928:	3001      	adds	r0, #1
 800092a:	d101      	bne.n	8000930 <sbrk_aligned+0x38>
 800092c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000930:	4620      	mov	r0, r4
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	200001c0 	.word	0x200001c0

08000938 <_malloc_r>:
 8000938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800093c:	1ccd      	adds	r5, r1, #3
 800093e:	f025 0503 	bic.w	r5, r5, #3
 8000942:	3508      	adds	r5, #8
 8000944:	2d0c      	cmp	r5, #12
 8000946:	bf38      	it	cc
 8000948:	250c      	movcc	r5, #12
 800094a:	2d00      	cmp	r5, #0
 800094c:	4607      	mov	r7, r0
 800094e:	db01      	blt.n	8000954 <_malloc_r+0x1c>
 8000950:	42a9      	cmp	r1, r5
 8000952:	d905      	bls.n	8000960 <_malloc_r+0x28>
 8000954:	230c      	movs	r3, #12
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	2600      	movs	r6, #0
 800095a:	4630      	mov	r0, r6
 800095c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000960:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a34 <_malloc_r+0xfc>
 8000964:	f000 f916 	bl	8000b94 <__malloc_lock>
 8000968:	f8d8 3000 	ldr.w	r3, [r8]
 800096c:	461c      	mov	r4, r3
 800096e:	bb5c      	cbnz	r4, 80009c8 <_malloc_r+0x90>
 8000970:	4629      	mov	r1, r5
 8000972:	4638      	mov	r0, r7
 8000974:	f7ff ffc0 	bl	80008f8 <sbrk_aligned>
 8000978:	1c43      	adds	r3, r0, #1
 800097a:	4604      	mov	r4, r0
 800097c:	d155      	bne.n	8000a2a <_malloc_r+0xf2>
 800097e:	f8d8 4000 	ldr.w	r4, [r8]
 8000982:	4626      	mov	r6, r4
 8000984:	2e00      	cmp	r6, #0
 8000986:	d145      	bne.n	8000a14 <_malloc_r+0xdc>
 8000988:	2c00      	cmp	r4, #0
 800098a:	d048      	beq.n	8000a1e <_malloc_r+0xe6>
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	4631      	mov	r1, r6
 8000990:	4638      	mov	r0, r7
 8000992:	eb04 0903 	add.w	r9, r4, r3
 8000996:	f000 fa99 	bl	8000ecc <_sbrk_r>
 800099a:	4581      	cmp	r9, r0
 800099c:	d13f      	bne.n	8000a1e <_malloc_r+0xe6>
 800099e:	6821      	ldr	r1, [r4, #0]
 80009a0:	1a6d      	subs	r5, r5, r1
 80009a2:	4629      	mov	r1, r5
 80009a4:	4638      	mov	r0, r7
 80009a6:	f7ff ffa7 	bl	80008f8 <sbrk_aligned>
 80009aa:	3001      	adds	r0, #1
 80009ac:	d037      	beq.n	8000a1e <_malloc_r+0xe6>
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	442b      	add	r3, r5
 80009b2:	6023      	str	r3, [r4, #0]
 80009b4:	f8d8 3000 	ldr.w	r3, [r8]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d038      	beq.n	8000a2e <_malloc_r+0xf6>
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	42a2      	cmp	r2, r4
 80009c0:	d12b      	bne.n	8000a1a <_malloc_r+0xe2>
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	e00f      	b.n	80009e8 <_malloc_r+0xb0>
 80009c8:	6822      	ldr	r2, [r4, #0]
 80009ca:	1b52      	subs	r2, r2, r5
 80009cc:	d41f      	bmi.n	8000a0e <_malloc_r+0xd6>
 80009ce:	2a0b      	cmp	r2, #11
 80009d0:	d917      	bls.n	8000a02 <_malloc_r+0xca>
 80009d2:	1961      	adds	r1, r4, r5
 80009d4:	42a3      	cmp	r3, r4
 80009d6:	6025      	str	r5, [r4, #0]
 80009d8:	bf18      	it	ne
 80009da:	6059      	strne	r1, [r3, #4]
 80009dc:	6863      	ldr	r3, [r4, #4]
 80009de:	bf08      	it	eq
 80009e0:	f8c8 1000 	streq.w	r1, [r8]
 80009e4:	5162      	str	r2, [r4, r5]
 80009e6:	604b      	str	r3, [r1, #4]
 80009e8:	4638      	mov	r0, r7
 80009ea:	f104 060b 	add.w	r6, r4, #11
 80009ee:	f000 f8d7 	bl	8000ba0 <__malloc_unlock>
 80009f2:	f026 0607 	bic.w	r6, r6, #7
 80009f6:	1d23      	adds	r3, r4, #4
 80009f8:	1af2      	subs	r2, r6, r3
 80009fa:	d0ae      	beq.n	800095a <_malloc_r+0x22>
 80009fc:	1b9b      	subs	r3, r3, r6
 80009fe:	50a3      	str	r3, [r4, r2]
 8000a00:	e7ab      	b.n	800095a <_malloc_r+0x22>
 8000a02:	42a3      	cmp	r3, r4
 8000a04:	6862      	ldr	r2, [r4, #4]
 8000a06:	d1dd      	bne.n	80009c4 <_malloc_r+0x8c>
 8000a08:	f8c8 2000 	str.w	r2, [r8]
 8000a0c:	e7ec      	b.n	80009e8 <_malloc_r+0xb0>
 8000a0e:	4623      	mov	r3, r4
 8000a10:	6864      	ldr	r4, [r4, #4]
 8000a12:	e7ac      	b.n	800096e <_malloc_r+0x36>
 8000a14:	4634      	mov	r4, r6
 8000a16:	6876      	ldr	r6, [r6, #4]
 8000a18:	e7b4      	b.n	8000984 <_malloc_r+0x4c>
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	e7cc      	b.n	80009b8 <_malloc_r+0x80>
 8000a1e:	230c      	movs	r3, #12
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4638      	mov	r0, r7
 8000a24:	f000 f8bc 	bl	8000ba0 <__malloc_unlock>
 8000a28:	e797      	b.n	800095a <_malloc_r+0x22>
 8000a2a:	6025      	str	r5, [r4, #0]
 8000a2c:	e7dc      	b.n	80009e8 <_malloc_r+0xb0>
 8000a2e:	605b      	str	r3, [r3, #4]
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	bf00      	nop
 8000a34:	200001bc 	.word	0x200001bc

08000a38 <__sflush_r>:
 8000a38:	898a      	ldrh	r2, [r1, #12]
 8000a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a3e:	4605      	mov	r5, r0
 8000a40:	0710      	lsls	r0, r2, #28
 8000a42:	460c      	mov	r4, r1
 8000a44:	d458      	bmi.n	8000af8 <__sflush_r+0xc0>
 8000a46:	684b      	ldr	r3, [r1, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dc05      	bgt.n	8000a58 <__sflush_r+0x20>
 8000a4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	dc02      	bgt.n	8000a58 <__sflush_r+0x20>
 8000a52:	2000      	movs	r0, #0
 8000a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d0f9      	beq.n	8000a52 <__sflush_r+0x1a>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a64:	682f      	ldr	r7, [r5, #0]
 8000a66:	6a21      	ldr	r1, [r4, #32]
 8000a68:	602b      	str	r3, [r5, #0]
 8000a6a:	d032      	beq.n	8000ad2 <__sflush_r+0x9a>
 8000a6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a6e:	89a3      	ldrh	r3, [r4, #12]
 8000a70:	075a      	lsls	r2, r3, #29
 8000a72:	d505      	bpl.n	8000a80 <__sflush_r+0x48>
 8000a74:	6863      	ldr	r3, [r4, #4]
 8000a76:	1ac0      	subs	r0, r0, r3
 8000a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a7a:	b10b      	cbz	r3, 8000a80 <__sflush_r+0x48>
 8000a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a7e:	1ac0      	subs	r0, r0, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	4602      	mov	r2, r0
 8000a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a86:	6a21      	ldr	r1, [r4, #32]
 8000a88:	4628      	mov	r0, r5
 8000a8a:	47b0      	blx	r6
 8000a8c:	1c43      	adds	r3, r0, #1
 8000a8e:	89a3      	ldrh	r3, [r4, #12]
 8000a90:	d106      	bne.n	8000aa0 <__sflush_r+0x68>
 8000a92:	6829      	ldr	r1, [r5, #0]
 8000a94:	291d      	cmp	r1, #29
 8000a96:	d82b      	bhi.n	8000af0 <__sflush_r+0xb8>
 8000a98:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <__sflush_r+0x108>)
 8000a9a:	410a      	asrs	r2, r1
 8000a9c:	07d6      	lsls	r6, r2, #31
 8000a9e:	d427      	bmi.n	8000af0 <__sflush_r+0xb8>
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6062      	str	r2, [r4, #4]
 8000aa4:	04d9      	lsls	r1, r3, #19
 8000aa6:	6922      	ldr	r2, [r4, #16]
 8000aa8:	6022      	str	r2, [r4, #0]
 8000aaa:	d504      	bpl.n	8000ab6 <__sflush_r+0x7e>
 8000aac:	1c42      	adds	r2, r0, #1
 8000aae:	d101      	bne.n	8000ab4 <__sflush_r+0x7c>
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	b903      	cbnz	r3, 8000ab6 <__sflush_r+0x7e>
 8000ab4:	6560      	str	r0, [r4, #84]	; 0x54
 8000ab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ab8:	602f      	str	r7, [r5, #0]
 8000aba:	2900      	cmp	r1, #0
 8000abc:	d0c9      	beq.n	8000a52 <__sflush_r+0x1a>
 8000abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	d002      	beq.n	8000acc <__sflush_r+0x94>
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	f000 fa22 	bl	8000f10 <_free_r>
 8000acc:	2000      	movs	r0, #0
 8000ace:	6360      	str	r0, [r4, #52]	; 0x34
 8000ad0:	e7c0      	b.n	8000a54 <__sflush_r+0x1c>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	47b0      	blx	r6
 8000ad8:	1c41      	adds	r1, r0, #1
 8000ada:	d1c8      	bne.n	8000a6e <__sflush_r+0x36>
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0c5      	beq.n	8000a6e <__sflush_r+0x36>
 8000ae2:	2b1d      	cmp	r3, #29
 8000ae4:	d001      	beq.n	8000aea <__sflush_r+0xb2>
 8000ae6:	2b16      	cmp	r3, #22
 8000ae8:	d101      	bne.n	8000aee <__sflush_r+0xb6>
 8000aea:	602f      	str	r7, [r5, #0]
 8000aec:	e7b1      	b.n	8000a52 <__sflush_r+0x1a>
 8000aee:	89a3      	ldrh	r3, [r4, #12]
 8000af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af4:	81a3      	strh	r3, [r4, #12]
 8000af6:	e7ad      	b.n	8000a54 <__sflush_r+0x1c>
 8000af8:	690f      	ldr	r7, [r1, #16]
 8000afa:	2f00      	cmp	r7, #0
 8000afc:	d0a9      	beq.n	8000a52 <__sflush_r+0x1a>
 8000afe:	0793      	lsls	r3, r2, #30
 8000b00:	680e      	ldr	r6, [r1, #0]
 8000b02:	bf08      	it	eq
 8000b04:	694b      	ldreq	r3, [r1, #20]
 8000b06:	600f      	str	r7, [r1, #0]
 8000b08:	bf18      	it	ne
 8000b0a:	2300      	movne	r3, #0
 8000b0c:	eba6 0807 	sub.w	r8, r6, r7
 8000b10:	608b      	str	r3, [r1, #8]
 8000b12:	f1b8 0f00 	cmp.w	r8, #0
 8000b16:	dd9c      	ble.n	8000a52 <__sflush_r+0x1a>
 8000b18:	6a21      	ldr	r1, [r4, #32]
 8000b1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	463a      	mov	r2, r7
 8000b20:	4628      	mov	r0, r5
 8000b22:	47b0      	blx	r6
 8000b24:	2800      	cmp	r0, #0
 8000b26:	dc06      	bgt.n	8000b36 <__sflush_r+0xfe>
 8000b28:	89a3      	ldrh	r3, [r4, #12]
 8000b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2e:	81a3      	strh	r3, [r4, #12]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b34:	e78e      	b.n	8000a54 <__sflush_r+0x1c>
 8000b36:	4407      	add	r7, r0
 8000b38:	eba8 0800 	sub.w	r8, r8, r0
 8000b3c:	e7e9      	b.n	8000b12 <__sflush_r+0xda>
 8000b3e:	bf00      	nop
 8000b40:	dfbffffe 	.word	0xdfbffffe

08000b44 <_fflush_r>:
 8000b44:	b538      	push	{r3, r4, r5, lr}
 8000b46:	690b      	ldr	r3, [r1, #16]
 8000b48:	4605      	mov	r5, r0
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	b913      	cbnz	r3, 8000b54 <_fflush_r+0x10>
 8000b4e:	2500      	movs	r5, #0
 8000b50:	4628      	mov	r0, r5
 8000b52:	bd38      	pop	{r3, r4, r5, pc}
 8000b54:	b118      	cbz	r0, 8000b5e <_fflush_r+0x1a>
 8000b56:	6a03      	ldr	r3, [r0, #32]
 8000b58:	b90b      	cbnz	r3, 8000b5e <_fflush_r+0x1a>
 8000b5a:	f7ff fe05 	bl	8000768 <__sinit>
 8000b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f3      	beq.n	8000b4e <_fflush_r+0xa>
 8000b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b68:	07d0      	lsls	r0, r2, #31
 8000b6a:	d404      	bmi.n	8000b76 <_fflush_r+0x32>
 8000b6c:	0599      	lsls	r1, r3, #22
 8000b6e:	d402      	bmi.n	8000b76 <_fflush_r+0x32>
 8000b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b72:	f7ff febe 	bl	80008f2 <__retarget_lock_acquire_recursive>
 8000b76:	4628      	mov	r0, r5
 8000b78:	4621      	mov	r1, r4
 8000b7a:	f7ff ff5d 	bl	8000a38 <__sflush_r>
 8000b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b80:	07da      	lsls	r2, r3, #31
 8000b82:	4605      	mov	r5, r0
 8000b84:	d4e4      	bmi.n	8000b50 <_fflush_r+0xc>
 8000b86:	89a3      	ldrh	r3, [r4, #12]
 8000b88:	059b      	lsls	r3, r3, #22
 8000b8a:	d4e1      	bmi.n	8000b50 <_fflush_r+0xc>
 8000b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b8e:	f7ff feb1 	bl	80008f4 <__retarget_lock_release_recursive>
 8000b92:	e7dd      	b.n	8000b50 <_fflush_r+0xc>

08000b94 <__malloc_lock>:
 8000b94:	4801      	ldr	r0, [pc, #4]	; (8000b9c <__malloc_lock+0x8>)
 8000b96:	f7ff beac 	b.w	80008f2 <__retarget_lock_acquire_recursive>
 8000b9a:	bf00      	nop
 8000b9c:	200001b8 	.word	0x200001b8

08000ba0 <__malloc_unlock>:
 8000ba0:	4801      	ldr	r0, [pc, #4]	; (8000ba8 <__malloc_unlock+0x8>)
 8000ba2:	f7ff bea7 	b.w	80008f4 <__retarget_lock_release_recursive>
 8000ba6:	bf00      	nop
 8000ba8:	200001b8 	.word	0x200001b8

08000bac <__sread>:
 8000bac:	b510      	push	{r4, lr}
 8000bae:	460c      	mov	r4, r1
 8000bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb4:	f000 f978 	bl	8000ea8 <_read_r>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	bfab      	itete	ge
 8000bbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8000bc0:	181b      	addge	r3, r3, r0
 8000bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000bc6:	bfac      	ite	ge
 8000bc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000bca:	81a3      	strhlt	r3, [r4, #12]
 8000bcc:	bd10      	pop	{r4, pc}

08000bce <__swrite>:
 8000bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd2:	461f      	mov	r7, r3
 8000bd4:	898b      	ldrh	r3, [r1, #12]
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	4605      	mov	r5, r0
 8000bda:	460c      	mov	r4, r1
 8000bdc:	4616      	mov	r6, r2
 8000bde:	d505      	bpl.n	8000bec <__swrite+0x1e>
 8000be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000be4:	2302      	movs	r3, #2
 8000be6:	2200      	movs	r2, #0
 8000be8:	f000 f94c 	bl	8000e84 <_lseek_r>
 8000bec:	89a3      	ldrh	r3, [r4, #12]
 8000bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bf6:	81a3      	strh	r3, [r4, #12]
 8000bf8:	4632      	mov	r2, r6
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c02:	f000 b973 	b.w	8000eec <_write_r>

08000c06 <__sseek>:
 8000c06:	b510      	push	{r4, lr}
 8000c08:	460c      	mov	r4, r1
 8000c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c0e:	f000 f939 	bl	8000e84 <_lseek_r>
 8000c12:	1c43      	adds	r3, r0, #1
 8000c14:	89a3      	ldrh	r3, [r4, #12]
 8000c16:	bf15      	itete	ne
 8000c18:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c22:	81a3      	strheq	r3, [r4, #12]
 8000c24:	bf18      	it	ne
 8000c26:	81a3      	strhne	r3, [r4, #12]
 8000c28:	bd10      	pop	{r4, pc}

08000c2a <__sclose>:
 8000c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c2e:	f000 b8f7 	b.w	8000e20 <_close_r>

08000c32 <__swbuf_r>:
 8000c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c34:	460e      	mov	r6, r1
 8000c36:	4614      	mov	r4, r2
 8000c38:	4605      	mov	r5, r0
 8000c3a:	b118      	cbz	r0, 8000c44 <__swbuf_r+0x12>
 8000c3c:	6a03      	ldr	r3, [r0, #32]
 8000c3e:	b90b      	cbnz	r3, 8000c44 <__swbuf_r+0x12>
 8000c40:	f7ff fd92 	bl	8000768 <__sinit>
 8000c44:	69a3      	ldr	r3, [r4, #24]
 8000c46:	60a3      	str	r3, [r4, #8]
 8000c48:	89a3      	ldrh	r3, [r4, #12]
 8000c4a:	071a      	lsls	r2, r3, #28
 8000c4c:	d525      	bpl.n	8000c9a <__swbuf_r+0x68>
 8000c4e:	6923      	ldr	r3, [r4, #16]
 8000c50:	b31b      	cbz	r3, 8000c9a <__swbuf_r+0x68>
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	6922      	ldr	r2, [r4, #16]
 8000c56:	1a98      	subs	r0, r3, r2
 8000c58:	6963      	ldr	r3, [r4, #20]
 8000c5a:	b2f6      	uxtb	r6, r6
 8000c5c:	4283      	cmp	r3, r0
 8000c5e:	4637      	mov	r7, r6
 8000c60:	dc04      	bgt.n	8000c6c <__swbuf_r+0x3a>
 8000c62:	4621      	mov	r1, r4
 8000c64:	4628      	mov	r0, r5
 8000c66:	f7ff ff6d 	bl	8000b44 <_fflush_r>
 8000c6a:	b9e0      	cbnz	r0, 8000ca6 <__swbuf_r+0x74>
 8000c6c:	68a3      	ldr	r3, [r4, #8]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	60a3      	str	r3, [r4, #8]
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	6022      	str	r2, [r4, #0]
 8000c78:	701e      	strb	r6, [r3, #0]
 8000c7a:	6962      	ldr	r2, [r4, #20]
 8000c7c:	1c43      	adds	r3, r0, #1
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__swbuf_r+0x5a>
 8000c82:	89a3      	ldrh	r3, [r4, #12]
 8000c84:	07db      	lsls	r3, r3, #31
 8000c86:	d506      	bpl.n	8000c96 <__swbuf_r+0x64>
 8000c88:	2e0a      	cmp	r6, #10
 8000c8a:	d104      	bne.n	8000c96 <__swbuf_r+0x64>
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	4628      	mov	r0, r5
 8000c90:	f7ff ff58 	bl	8000b44 <_fflush_r>
 8000c94:	b938      	cbnz	r0, 8000ca6 <__swbuf_r+0x74>
 8000c96:	4638      	mov	r0, r7
 8000c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	f000 f805 	bl	8000cac <__swsetup_r>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d0d5      	beq.n	8000c52 <__swbuf_r+0x20>
 8000ca6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000caa:	e7f4      	b.n	8000c96 <__swbuf_r+0x64>

08000cac <__swsetup_r>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <__swsetup_r+0xac>)
 8000cb0:	4605      	mov	r5, r0
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	b118      	cbz	r0, 8000cc0 <__swsetup_r+0x14>
 8000cb8:	6a03      	ldr	r3, [r0, #32]
 8000cba:	b90b      	cbnz	r3, 8000cc0 <__swsetup_r+0x14>
 8000cbc:	f7ff fd54 	bl	8000768 <__sinit>
 8000cc0:	89a3      	ldrh	r3, [r4, #12]
 8000cc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cc6:	0718      	lsls	r0, r3, #28
 8000cc8:	d422      	bmi.n	8000d10 <__swsetup_r+0x64>
 8000cca:	06d9      	lsls	r1, r3, #27
 8000ccc:	d407      	bmi.n	8000cde <__swsetup_r+0x32>
 8000cce:	2309      	movs	r3, #9
 8000cd0:	602b      	str	r3, [r5, #0]
 8000cd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000cd6:	81a3      	strh	r3, [r4, #12]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cdc:	e034      	b.n	8000d48 <__swsetup_r+0x9c>
 8000cde:	0758      	lsls	r0, r3, #29
 8000ce0:	d512      	bpl.n	8000d08 <__swsetup_r+0x5c>
 8000ce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ce4:	b141      	cbz	r1, 8000cf8 <__swsetup_r+0x4c>
 8000ce6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d002      	beq.n	8000cf4 <__swsetup_r+0x48>
 8000cee:	4628      	mov	r0, r5
 8000cf0:	f000 f90e 	bl	8000f10 <_free_r>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	6363      	str	r3, [r4, #52]	; 0x34
 8000cf8:	89a3      	ldrh	r3, [r4, #12]
 8000cfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000cfe:	81a3      	strh	r3, [r4, #12]
 8000d00:	2300      	movs	r3, #0
 8000d02:	6063      	str	r3, [r4, #4]
 8000d04:	6923      	ldr	r3, [r4, #16]
 8000d06:	6023      	str	r3, [r4, #0]
 8000d08:	89a3      	ldrh	r3, [r4, #12]
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	81a3      	strh	r3, [r4, #12]
 8000d10:	6923      	ldr	r3, [r4, #16]
 8000d12:	b94b      	cbnz	r3, 8000d28 <__swsetup_r+0x7c>
 8000d14:	89a3      	ldrh	r3, [r4, #12]
 8000d16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d1e:	d003      	beq.n	8000d28 <__swsetup_r+0x7c>
 8000d20:	4621      	mov	r1, r4
 8000d22:	4628      	mov	r0, r5
 8000d24:	f000 f840 	bl	8000da8 <__smakebuf_r>
 8000d28:	89a0      	ldrh	r0, [r4, #12]
 8000d2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d2e:	f010 0301 	ands.w	r3, r0, #1
 8000d32:	d00a      	beq.n	8000d4a <__swsetup_r+0x9e>
 8000d34:	2300      	movs	r3, #0
 8000d36:	60a3      	str	r3, [r4, #8]
 8000d38:	6963      	ldr	r3, [r4, #20]
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	61a3      	str	r3, [r4, #24]
 8000d3e:	6923      	ldr	r3, [r4, #16]
 8000d40:	b943      	cbnz	r3, 8000d54 <__swsetup_r+0xa8>
 8000d42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d46:	d1c4      	bne.n	8000cd2 <__swsetup_r+0x26>
 8000d48:	bd38      	pop	{r3, r4, r5, pc}
 8000d4a:	0781      	lsls	r1, r0, #30
 8000d4c:	bf58      	it	pl
 8000d4e:	6963      	ldrpl	r3, [r4, #20]
 8000d50:	60a3      	str	r3, [r4, #8]
 8000d52:	e7f4      	b.n	8000d3e <__swsetup_r+0x92>
 8000d54:	2000      	movs	r0, #0
 8000d56:	e7f7      	b.n	8000d48 <__swsetup_r+0x9c>
 8000d58:	20000058 	.word	0x20000058

08000d5c <__swhatbuf_r>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	460c      	mov	r4, r1
 8000d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d64:	2900      	cmp	r1, #0
 8000d66:	b096      	sub	sp, #88	; 0x58
 8000d68:	4615      	mov	r5, r2
 8000d6a:	461e      	mov	r6, r3
 8000d6c:	da0d      	bge.n	8000d8a <__swhatbuf_r+0x2e>
 8000d6e:	89a3      	ldrh	r3, [r4, #12]
 8000d70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d74:	f04f 0100 	mov.w	r1, #0
 8000d78:	bf0c      	ite	eq
 8000d7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000d7e:	2340      	movne	r3, #64	; 0x40
 8000d80:	2000      	movs	r0, #0
 8000d82:	6031      	str	r1, [r6, #0]
 8000d84:	602b      	str	r3, [r5, #0]
 8000d86:	b016      	add	sp, #88	; 0x58
 8000d88:	bd70      	pop	{r4, r5, r6, pc}
 8000d8a:	466a      	mov	r2, sp
 8000d8c:	f000 f858 	bl	8000e40 <_fstat_r>
 8000d90:	2800      	cmp	r0, #0
 8000d92:	dbec      	blt.n	8000d6e <__swhatbuf_r+0x12>
 8000d94:	9901      	ldr	r1, [sp, #4]
 8000d96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000d9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000d9e:	4259      	negs	r1, r3
 8000da0:	4159      	adcs	r1, r3
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	e7eb      	b.n	8000d80 <__swhatbuf_r+0x24>

08000da8 <__smakebuf_r>:
 8000da8:	898b      	ldrh	r3, [r1, #12]
 8000daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dac:	079d      	lsls	r5, r3, #30
 8000dae:	4606      	mov	r6, r0
 8000db0:	460c      	mov	r4, r1
 8000db2:	d507      	bpl.n	8000dc4 <__smakebuf_r+0x1c>
 8000db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000db8:	6023      	str	r3, [r4, #0]
 8000dba:	6123      	str	r3, [r4, #16]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	6163      	str	r3, [r4, #20]
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	ab01      	add	r3, sp, #4
 8000dc6:	466a      	mov	r2, sp
 8000dc8:	f7ff ffc8 	bl	8000d5c <__swhatbuf_r>
 8000dcc:	9900      	ldr	r1, [sp, #0]
 8000dce:	4605      	mov	r5, r0
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	f7ff fdb1 	bl	8000938 <_malloc_r>
 8000dd6:	b948      	cbnz	r0, 8000dec <__smakebuf_r+0x44>
 8000dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ddc:	059a      	lsls	r2, r3, #22
 8000dde:	d4ef      	bmi.n	8000dc0 <__smakebuf_r+0x18>
 8000de0:	f023 0303 	bic.w	r3, r3, #3
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	81a3      	strh	r3, [r4, #12]
 8000dea:	e7e3      	b.n	8000db4 <__smakebuf_r+0xc>
 8000dec:	89a3      	ldrh	r3, [r4, #12]
 8000dee:	6020      	str	r0, [r4, #0]
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	81a3      	strh	r3, [r4, #12]
 8000df6:	9b00      	ldr	r3, [sp, #0]
 8000df8:	6163      	str	r3, [r4, #20]
 8000dfa:	9b01      	ldr	r3, [sp, #4]
 8000dfc:	6120      	str	r0, [r4, #16]
 8000dfe:	b15b      	cbz	r3, 8000e18 <__smakebuf_r+0x70>
 8000e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e04:	4630      	mov	r0, r6
 8000e06:	f000 f82d 	bl	8000e64 <_isatty_r>
 8000e0a:	b128      	cbz	r0, 8000e18 <__smakebuf_r+0x70>
 8000e0c:	89a3      	ldrh	r3, [r4, #12]
 8000e0e:	f023 0303 	bic.w	r3, r3, #3
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	81a3      	strh	r3, [r4, #12]
 8000e18:	89a3      	ldrh	r3, [r4, #12]
 8000e1a:	431d      	orrs	r5, r3
 8000e1c:	81a5      	strh	r5, [r4, #12]
 8000e1e:	e7cf      	b.n	8000dc0 <__smakebuf_r+0x18>

08000e20 <_close_r>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	4d06      	ldr	r5, [pc, #24]	; (8000e3c <_close_r+0x1c>)
 8000e24:	2300      	movs	r3, #0
 8000e26:	4604      	mov	r4, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	602b      	str	r3, [r5, #0]
 8000e2c:	f7ff faff 	bl	800042e <_close>
 8000e30:	1c43      	adds	r3, r0, #1
 8000e32:	d102      	bne.n	8000e3a <_close_r+0x1a>
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	b103      	cbz	r3, 8000e3a <_close_r+0x1a>
 8000e38:	6023      	str	r3, [r4, #0]
 8000e3a:	bd38      	pop	{r3, r4, r5, pc}
 8000e3c:	200001c4 	.word	0x200001c4

08000e40 <_fstat_r>:
 8000e40:	b538      	push	{r3, r4, r5, lr}
 8000e42:	4d07      	ldr	r5, [pc, #28]	; (8000e60 <_fstat_r+0x20>)
 8000e44:	2300      	movs	r3, #0
 8000e46:	4604      	mov	r4, r0
 8000e48:	4608      	mov	r0, r1
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	602b      	str	r3, [r5, #0]
 8000e4e:	f7ff fafa 	bl	8000446 <_fstat>
 8000e52:	1c43      	adds	r3, r0, #1
 8000e54:	d102      	bne.n	8000e5c <_fstat_r+0x1c>
 8000e56:	682b      	ldr	r3, [r5, #0]
 8000e58:	b103      	cbz	r3, 8000e5c <_fstat_r+0x1c>
 8000e5a:	6023      	str	r3, [r4, #0]
 8000e5c:	bd38      	pop	{r3, r4, r5, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001c4 	.word	0x200001c4

08000e64 <_isatty_r>:
 8000e64:	b538      	push	{r3, r4, r5, lr}
 8000e66:	4d06      	ldr	r5, [pc, #24]	; (8000e80 <_isatty_r+0x1c>)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	602b      	str	r3, [r5, #0]
 8000e70:	f7ff faf9 	bl	8000466 <_isatty>
 8000e74:	1c43      	adds	r3, r0, #1
 8000e76:	d102      	bne.n	8000e7e <_isatty_r+0x1a>
 8000e78:	682b      	ldr	r3, [r5, #0]
 8000e7a:	b103      	cbz	r3, 8000e7e <_isatty_r+0x1a>
 8000e7c:	6023      	str	r3, [r4, #0]
 8000e7e:	bd38      	pop	{r3, r4, r5, pc}
 8000e80:	200001c4 	.word	0x200001c4

08000e84 <_lseek_r>:
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	4d07      	ldr	r5, [pc, #28]	; (8000ea4 <_lseek_r+0x20>)
 8000e88:	4604      	mov	r4, r0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	2200      	movs	r2, #0
 8000e90:	602a      	str	r2, [r5, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	f7ff faf2 	bl	800047c <_lseek>
 8000e98:	1c43      	adds	r3, r0, #1
 8000e9a:	d102      	bne.n	8000ea2 <_lseek_r+0x1e>
 8000e9c:	682b      	ldr	r3, [r5, #0]
 8000e9e:	b103      	cbz	r3, 8000ea2 <_lseek_r+0x1e>
 8000ea0:	6023      	str	r3, [r4, #0]
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
 8000ea4:	200001c4 	.word	0x200001c4

08000ea8 <_read_r>:
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	4d07      	ldr	r5, [pc, #28]	; (8000ec8 <_read_r+0x20>)
 8000eac:	4604      	mov	r4, r0
 8000eae:	4608      	mov	r0, r1
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	602a      	str	r2, [r5, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f7ff fa80 	bl	80003bc <_read>
 8000ebc:	1c43      	adds	r3, r0, #1
 8000ebe:	d102      	bne.n	8000ec6 <_read_r+0x1e>
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	b103      	cbz	r3, 8000ec6 <_read_r+0x1e>
 8000ec4:	6023      	str	r3, [r4, #0]
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	200001c4 	.word	0x200001c4

08000ecc <_sbrk_r>:
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4d06      	ldr	r5, [pc, #24]	; (8000ee8 <_sbrk_r+0x1c>)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	602b      	str	r3, [r5, #0]
 8000ed8:	f7ff fade 	bl	8000498 <_sbrk>
 8000edc:	1c43      	adds	r3, r0, #1
 8000ede:	d102      	bne.n	8000ee6 <_sbrk_r+0x1a>
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	b103      	cbz	r3, 8000ee6 <_sbrk_r+0x1a>
 8000ee4:	6023      	str	r3, [r4, #0]
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
 8000ee8:	200001c4 	.word	0x200001c4

08000eec <_write_r>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	4d07      	ldr	r5, [pc, #28]	; (8000f0c <_write_r+0x20>)
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	4608      	mov	r0, r1
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	602a      	str	r2, [r5, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	f7ff fa7b 	bl	80003f6 <_write>
 8000f00:	1c43      	adds	r3, r0, #1
 8000f02:	d102      	bne.n	8000f0a <_write_r+0x1e>
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	b103      	cbz	r3, 8000f0a <_write_r+0x1e>
 8000f08:	6023      	str	r3, [r4, #0]
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}
 8000f0c:	200001c4 	.word	0x200001c4

08000f10 <_free_r>:
 8000f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f12:	2900      	cmp	r1, #0
 8000f14:	d044      	beq.n	8000fa0 <_free_r+0x90>
 8000f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f1a:	9001      	str	r0, [sp, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8000f22:	bfb8      	it	lt
 8000f24:	18e4      	addlt	r4, r4, r3
 8000f26:	f7ff fe35 	bl	8000b94 <__malloc_lock>
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <_free_r+0x94>)
 8000f2c:	9801      	ldr	r0, [sp, #4]
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	b933      	cbnz	r3, 8000f40 <_free_r+0x30>
 8000f32:	6063      	str	r3, [r4, #4]
 8000f34:	6014      	str	r4, [r2, #0]
 8000f36:	b003      	add	sp, #12
 8000f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f3c:	f7ff be30 	b.w	8000ba0 <__malloc_unlock>
 8000f40:	42a3      	cmp	r3, r4
 8000f42:	d908      	bls.n	8000f56 <_free_r+0x46>
 8000f44:	6825      	ldr	r5, [r4, #0]
 8000f46:	1961      	adds	r1, r4, r5
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	bf01      	itttt	eq
 8000f4c:	6819      	ldreq	r1, [r3, #0]
 8000f4e:	685b      	ldreq	r3, [r3, #4]
 8000f50:	1949      	addeq	r1, r1, r5
 8000f52:	6021      	streq	r1, [r4, #0]
 8000f54:	e7ed      	b.n	8000f32 <_free_r+0x22>
 8000f56:	461a      	mov	r2, r3
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	b10b      	cbz	r3, 8000f60 <_free_r+0x50>
 8000f5c:	42a3      	cmp	r3, r4
 8000f5e:	d9fa      	bls.n	8000f56 <_free_r+0x46>
 8000f60:	6811      	ldr	r1, [r2, #0]
 8000f62:	1855      	adds	r5, r2, r1
 8000f64:	42a5      	cmp	r5, r4
 8000f66:	d10b      	bne.n	8000f80 <_free_r+0x70>
 8000f68:	6824      	ldr	r4, [r4, #0]
 8000f6a:	4421      	add	r1, r4
 8000f6c:	1854      	adds	r4, r2, r1
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	6011      	str	r1, [r2, #0]
 8000f72:	d1e0      	bne.n	8000f36 <_free_r+0x26>
 8000f74:	681c      	ldr	r4, [r3, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	6053      	str	r3, [r2, #4]
 8000f7a:	440c      	add	r4, r1
 8000f7c:	6014      	str	r4, [r2, #0]
 8000f7e:	e7da      	b.n	8000f36 <_free_r+0x26>
 8000f80:	d902      	bls.n	8000f88 <_free_r+0x78>
 8000f82:	230c      	movs	r3, #12
 8000f84:	6003      	str	r3, [r0, #0]
 8000f86:	e7d6      	b.n	8000f36 <_free_r+0x26>
 8000f88:	6825      	ldr	r5, [r4, #0]
 8000f8a:	1961      	adds	r1, r4, r5
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	bf04      	itt	eq
 8000f90:	6819      	ldreq	r1, [r3, #0]
 8000f92:	685b      	ldreq	r3, [r3, #4]
 8000f94:	6063      	str	r3, [r4, #4]
 8000f96:	bf04      	itt	eq
 8000f98:	1949      	addeq	r1, r1, r5
 8000f9a:	6021      	streq	r1, [r4, #0]
 8000f9c:	6054      	str	r4, [r2, #4]
 8000f9e:	e7ca      	b.n	8000f36 <_free_r+0x26>
 8000fa0:	b003      	add	sp, #12
 8000fa2:	bd30      	pop	{r4, r5, pc}
 8000fa4:	200001bc 	.word	0x200001bc

08000fa8 <_init>:
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	bf00      	nop
 8000fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fae:	bc08      	pop	{r3}
 8000fb0:	469e      	mov	lr, r3
 8000fb2:	4770      	bx	lr

08000fb4 <_fini>:
 8000fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb6:	bf00      	nop
 8000fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fba:	bc08      	pop	{r3}
 8000fbc:	469e      	mov	lr, r3
 8000fbe:	4770      	bx	lr
